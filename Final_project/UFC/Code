# -*- coding: utf-8 -*-
"""
Created on Wed Dec 23 11:10:26 2020

@author: Saurabh
"""


# # Importing Libraries

# In[1]:


import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec


# In[12]:


#Supress warnings

import warnings
warnings.filterwarnings('ignore')


pd.set_option('display.max_columns',None)


# # Reading Data

# In[13]:




fighter_details=pd.read_csv(r'C:\Users\Saurabh\Downloads\UFC\raw_fighter_details.csv',header=0 )
df = pd.read_csv(r"C:\Users\Saurabh\Downloads\UFC\raw_total_fight_data.csv", sep=';')
df.shape  


# In[14]:


df.head() # The Match Data


# In[15]:


fighter_details.head() #The fighter data 


# In[16]:


df.info()


# Column definitions:
# R_ and B_ prefix signifies red and blue corner fighter stats respectively
# KD is number of knockdowns
# SIG_STR is no. of significant strikes 'landed of attempted'
# SIG_STR_pct is significant strikes percentage
# TOTAL_STR is total strikes 'landed of attempted'
# TD is no. of takedowns
# TD_pct is takedown percentages
# SUB_ATT is no. of submission attempts
# PASS is no. times the guard was passed?
# REV?
# HEAD is no. of significant strinks to the head 'landed of attempted'
# BODY is no. of significant strikes to the body 'landed of attempted'
# CLINCH is no. of significant strikes in the clinch 'landed of attempted'
# GROUND is no. of significant strikes on the ground 'landed of attempted'
# win_by is method of win
# last_round is last round of the fight (ex. if it was a KO in 1st, then this will be 1)
# last_round_time is when the fight ended in the last round
# Format is the format of the fight (3 rounds, 5 rounds etc.)
# Referee is the name of the Ref
# date is the date of the fight
# location is the location in which the event took place
# Fight_type is which weight class and whether it's a title bout or not
# Winner is the winner of the fight

# # Split The Strike Attemp and Strike Landed

# In[18]:


df.columns


# In[19]:


columns = ['R_SIG_STR.', 'B_SIG_STR.', 'R_TOTAL_STR.', 'B_TOTAL_STR.',
       'R_TD', 'B_TD', 'R_HEAD', 'B_HEAD', 'R_BODY','B_BODY', 'R_LEG', 'B_LEG', 
        'R_DISTANCE', 'B_DISTANCE', 'R_CLINCH','B_CLINCH', 'R_GROUND', 'B_GROUND']


# In[20]:


attemp = '_att'
landed = '_landed'

for column in columns:
    df[column+attemp] = df[column].apply(lambda X: int(X.split('of')[1]))
    df[column+landed] = df[column].apply(lambda X: int(X.split('of')[0]))
    
df.drop(columns, axis=1, inplace=True)


# In[21]:


df


# In[22]:


pct_columns = ['R_SIG_STR_pct','B_SIG_STR_pct', 'R_TD_pct', 'B_TD_pct']

for column in pct_columns:
    df[column] = df[column].apply(lambda X: float(X.replace('%', ''))/100)


# # Pre-Processing

# # Creating Fighter Division

# In[23]:


def Division(X):
    for Division in weight_classes:
        if Division in X:
            return Division
    if X == 'Catch Weight Bout' or 'Catchweight Bout':
        return 'Catch Weight'
    else:
        return 'Open Weight'


# In[24]:


weight_classes = ['Women\'s Strawweight', 'Women\'s Bantamweight', 
                  'Women\'s Featherweight', 'Women\'s Flyweight', 'Lightweight', 
                  'Welterweight', 'Middleweight','Light Heavyweight', 
                  'Heavyweight', 'Featherweight','Bantamweight', 'Flyweight', 'Open Weight']

df['weight_class'] = df['Fight_type'].apply(Division)


# In[25]:


df['weight_class'].value_counts()


# # Number of Round¶
# 

# In[26]:


def get_rounds(X):
    if X == 'No Time Limit':
        return 1
    else:
        return len(X.split('(')[1].replace(')', '').split('-'))

df['no_of_rounds'] = df['Format'].apply(get_rounds)


# # Replace Winner Name with R/B

# In[27]:


df['Winner'].isnull().sum()


# In[28]:


df['Winner'].fillna('Draw', inplace=True) #fill the null value with draw


# In[29]:


def get_renamed_winner(row):
    if row['R_fighter'] == row['Winner']:
        return 'Red'
    elif row['B_fighter'] == row['Winner']:
        return 'Blue'
    elif row['Winner'] == 'Draw':
        return 'Draw'

df['Winner'] = df[['R_fighter', 'B_fighter', 'Winner']].apply(get_renamed_winner, axis=1)


# In[30]:


df['Winner'].value_counts()


# # Deal with fighter details data
# 1.Inch to CM
# 2.Merger Fighter Data with Match Data
# 3.Get Fighter Age

# In[31]:


def convert_to_cms(X):
    if X is np.NaN:
        return X
    elif len(X.split("'")) == 2:
        feet = float(X.split("'")[0])
        inches = int(X.split("'")[1].replace(' ', '').replace('"',''))
        return (feet * 30.48) + (inches * 2.54)
    else:
        return float(X.replace('"','')) * 2.54


# In[32]:


fighter_details['Height'] = fighter_details['Height'].apply(convert_to_cms)
fighter_details['Reach'] = fighter_details['Reach'].apply(convert_to_cms)


# In[33]:


fighter_details['Weight'] = fighter_details['Weight'].apply(lambda X: float(X.replace(' lbs.', '')) if X is not np.NaN else X)


# In[34]:


fighter_details.head()


# # Merger Fighter Data with Match Data
# 

# In[35]:


new = df.merge(fighter_details, left_on='R_fighter', right_on='fighter_name', how='left')


# In[36]:


new = new.drop('fighter_name', axis=1)


# In[37]:


new


# In[38]:


new.rename(columns={'Height':'R_Height',
                          'Weight':'R_Weight',
                          'Reach':'R_Reach',
                          'Stance':'R_Stance',
                          'DOB':'R_DOB'}, 
                 inplace=True)


# In[39]:


new = new.merge(fighter_details, left_on='B_fighter', right_on='fighter_name', how='left')


# In[40]:


new = new.drop('fighter_name', axis=1)


# In[41]:


new.rename(columns={'Height':'B_Height',
                          'Weight':'B_Weight',
                          'Reach':'B_Reach',
                          'Stance':'B_Stance',
                          'DOB':'B_DOB'}, 
                 inplace=True)


# In[42]:


new.head()


# In[43]:


new['R_DOB'] = pd.to_datetime(new['R_DOB'])
new['B_DOB'] = pd.to_datetime(new['B_DOB'])
new['date'] = pd.to_datetime(new['date'])


# In[44]:


new['R_year'] = new['R_DOB'].apply(lambda x: x.year)
new['B_year'] = new['B_DOB'].apply(lambda x: x.year)
new['date_year'] = new['date'].apply(lambda x: x.year)


# In[45]:


def get_age(row):
    B_age = (row['date_year'] - row['B_year'])
    R_age = (row['date_year'] - row['R_year'])
    if np.isnan(B_age)!=True:
        B_age = B_age
    if np.isnan(R_age)!=True:
        R_age = R_age
    return pd.Series([B_age, R_age], index=['B_age', 'R_age'])


# In[46]:


new


# In[47]:


new[['B_age', 'R_age']]= new[['date_year', 'R_year', 'B_year']].apply(get_age, axis=1)


# In[48]:


new.drop(['R_DOB', 'B_DOB','date_year','R_year','B_year'], axis=1, inplace=True)


# # Fighter Country

# In[49]:


new['country'] = new['location'].apply(lambda x : x.split(',')[-1])


# In[50]:


new


# # EDA and Visualizations

# In[51]:


new['date_year'] = new['date'].apply(lambda x: x.year)


# In[52]:


values = new['date_year'].sort_values(ascending=False).value_counts().sort_index()
labels = values.index



plt.figure(figsize=(15,8))
bar = sns.barplot(x=labels, y=values, palette='tab10')


ax = plt.gca()
y_max = values.max() 
ax.set_ylim(1)
for p in ax.patches:
    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), 
        fontsize=10, color='black', ha='center', va='bottom')
    
plt.xlabel('Year')
plt.ylabel('No. of Events')
plt.title('UFC Event Per Year')
plt.show()


#  UFC become popular since 2011 and have the most event happened on 2014 probably because of the audience brought by Ronda Rousey
# 

# In[53]:


plt.figure(figsize=(10,5))
bar = sns.countplot(new['country'])
plt.xticks(rotation=90)
ax = plt.gca()
y_max = new['country'].value_counts().max() 
plt.title('Event by Country')    
plt.show()


# The first UFC match Held in Denver,Colorado, USA. And until now the sport is become so popular in USA
# 
# 

# In[54]:


women = new.weight_class.str.contains('Women')


# In[55]:


women1 = len(new[women])
men = (len(new['weight_class'])) - len(new[women])


# In[56]:


labels = 'Men Fight', 'Women Fight'
sizes = [men,women1]
explode = (0, 0.1,)  

fig1, ax1 = plt.subplots(figsize=(10,8))
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90 )
ax1.axis('equal') 

plt.show()


# As you can see majority of fights take place in the Men's category

# 
# # Let see the win distribution between red and blue side¶
# 

# In[93]:


plt.figure(figsize=(15,8))
new['Winner'].value_counts().plot.pie(explode=[0.05,0.05,0.05],autopct='%1.1f%%',shadow=True)
plt.show()


# Looks like Champions have a nice time retaining the Belt hence their winning percentage is higher

# # Then let see how the Age affect the winner of the match
# 

# In[94]:


new['R_age'] = new['R_age'].fillna(new['R_age'].median())


# In[95]:


new['B_age'] = new['B_age'].fillna(new['B_age'].median())


# In[96]:


f,ax=plt.subplots(1,2,figsize=(10,8))
sns.distplot(new['R_age'], ax=ax[0])

ax[0].set_title('R_age')
ax[0].set_ylabel('')
hist = sns.distplot(new['B_age'],ax=ax[1])

ax[1].set_title('B_age')
plt.show()


# Here the peak age of fighters is 30 

# In[97]:


f,ax=plt.subplots(1,2,figsize=(10,8))
new[new['Winner']=='Red']['R_age'].value_counts().plot.bar(ax=ax[0])

ax[0].set_title('R_age')
ax[0].set_ylabel('')
bar = new[new['Winner']=='Blue']['B_age'].value_counts().plot.bar(ax=ax[1])

ax[1].set_title('B_age')
plt.show()


# Since the peak age of the fighters is 30 ,their chances of winning is also higher at 30

# # Then Now lets see how Height can affect the match

# In[98]:


sns.lmplot(x='R_Height', y='R_Reach', data=new)
plt.show()


# Its a no brainer if you have a height advantage then your chances of winning are higher

# # UFC Division Distribution

# In[63]:


plt.figure(figsize=(15,8))
sns.countplot(y=new['weight_class'])

sns.set()
sns.set(style="white")
plt.show()


# Lightweight and Welterweight dominate the ufc ,since most of the money fights originate from this category

# In[64]:


values = new['win_by'].value_counts()
labels = values.index

plt.figure(figsize=(15,8))

sns.barplot(x=values,y=labels, palette='RdBu')

plt.title('UFC Fight Win By')
plt.show()


# In[99]:


Attempt = pd.concat([new['R_TOTAL_STR._att'], new['B_TOTAL_STR._att']], ignore_index=True)
Landed = pd.concat([new['R_TOTAL_STR._landed'], new['B_TOTAL_STR._landed']], ignore_index=True)


# In[100]:


sns.jointplot(x=Attempt , y=Landed)
plt.show()


# In[101]:


r_landed = new['R_TOTAL_STR._landed']
r_index = r_landed.index


# In[102]:


b_landed = new['B_TOTAL_STR._landed']
b_index = b_landed.index


# In[103]:


new['Winner'].head(9)


# In[105]:


Fighter = pd.concat([new['R_fighter'], new['B_fighter']], ignore_index=True)


# In[106]:


plt.figure(figsize=(10,8))
sns.countplot(y = Fighter, order=pd.value_counts(Fighter).iloc[:10].index)
plt.show()


# Donald Cerrone and Jim Miller are the ones with the most fights in UFC

# # Predicitve Modelling

# In[107]:


from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import KFold, RandomizedSearchCV


import warnings
warnings.filterwarnings("ignore")


# # Pre - Processing

# In[108]:


df = new.copy()


# In[109]:


df.info()


# # Missing Values Imputation

# In[110]:


total = df.isnull().sum().sort_values(ascending=False)
percent= (df.isnull().sum()/df.isnull().count()  * 100).sort_values(ascending=False)
missing_data = pd.concat([total,percent],axis=1,keys=['Total','Percent'])
missing_data.head(32)


# In[111]:


df['B_Stance'].fillna(df['B_Stance'].mode()[0],inplace=True)
df['R_Stance'].fillna(df['R_Stance'].mode()[0],inplace=True)
df['Referee'].fillna(df['Referee'].mode()[0],inplace=True)


# In[112]:


df['B_Reach'].fillna(int(df['B_Reach'].mean()),inplace=True)
df['R_Reach'].fillna(int(df['R_Reach'].mean()),inplace=True)
df['B_Height'].fillna(int(df['B_Height'].mean()),inplace=True)
df['B_Weight'].fillna(int(df['B_Weight'].mean()),inplace=True)
df['R_Height'].fillna(int(df['R_Height'].mean()),inplace=True)
df['R_Weight'].fillna(int(df['R_Weight'].mean()),inplace=True)


# # Data Encoding
# 

# In[113]:


colname=['R_fighter',
 'B_fighter',
 'win_by',
 'last_round_time',
 'Format',
 'Referee',
 'location',
 'Fight_type',
 'weight_class',
 'R_Stance',
 'B_Stance',
 'country']

colname


# In[114]:


# For preprocessing the data
from sklearn import preprocessing

le=preprocessing.LabelEncoder()

for x in colname:
    df[x]=le.fit_transform(df[x])


# In[115]:


df['Winner_num'] = df.Winner.map({'Red':0,'Blue':1,'Draw':2})


# In[116]:


df = df.drop(['country','location','date_year','date','Referee','Format','last_round_time','Fight_type','Winner'], axis=1)


# # Creating Custom Function for Plotting Confusion Matrix

# In[117]:


import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
import itertools


def plot_confusion_metrix(cm,classes,
                         normalize=False,
                         title='Confusion Matrix',
                         cmap=plt.cm.Greens):
    """this function prints and plot the confusion matirx
    Normalization can be applied by setting 'normalize=True'
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized Confusion Matrix")
    else:
        print("Confusion Matrix")
        
    print(cm)
    
    plt.imshow(cm, interpolation='nearest',cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks,classes,rotation=35)
    plt.yticks(tick_marks,classes)
    
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() /2.
    
    for i , j in itertools.product(range(cm.shape[0]), range(cm.shape[0])):
        plt.text(j, i, format(cm[i,j], fmt),
                 horizontalalignment='center',
                 color='white' if cm[i, j] > thresh else 'black')
    
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()


# In[118]:


df.columns


# # Modeling 
# 

# In[119]:


from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc
from itertools import cycle
lw=1


# In[120]:


X = df.drop(['Winner_num','R_fighter','B_fighter','win_by'], axis=1)
Y = df['Winner_num']

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.25, random_state = 42)


# In[121]:


Y = label_binarize(Y, classes=[0, 1, 2])
n_classes = Y.shape[1]


# In[122]:


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
X=scaler.transform(X)
print(X)


# # Decision Tree Classifier

# In[123]:


#predicting using the Decision_Tree_Classifier
from sklearn.tree import DecisionTreeClassifier

model_DecisionTree=DecisionTreeClassifier(criterion = 'gini',min_samples_split=2,random_state=50,class_weight='balanced'
                                         ,max_depth=30)
model_DecisionTree.fit(X_train,Y_train)

#fit the model on the data and predict the values
Y_pred=model_DecisionTree.predict(X_test)


# In[124]:


from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

conf_matrix = confusion_matrix(Y_test,Y_pred)
plot_confusion_metrix(conf_matrix,classes=['RED  :  0','BLUE  :1','DRAW:0'])
plt.show()

print('Classification report')

print(classification_report(Y_test,Y_pred))

acc= accuracy_score(Y_test,Y_pred)
print("Accuracy of the model:", acc)


# # Gradient Boosting Classifier

# In[125]:


#predicting using the 
from sklearn.ensemble import GradientBoostingClassifier

model_GradientBoosting=GradientBoostingClassifier(n_estimators=1000,)


#fit the model on the data and predict the values
model_GradientBoosting.fit(X_train,Y_train)

Y_pred=model_GradientBoosting.predict(X_test)


# In[126]:


from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

conf_matrix = confusion_matrix(Y_test,Y_pred)
plot_confusion_metrix(conf_matrix,classes=['RED  :  0','BLUE  :1','DRAW:0'])
plt.show()

print('Classification report')

print(classification_report(Y_test,Y_pred))

acc= accuracy_score(Y_test,Y_pred)
print("Accuracy of the model:", acc)


# # Random Forest Classifier

# In[102]:


#predicting using the Random_Forest_Classifier
from sklearn.ensemble import RandomForestClassifier

model_RandomForest=RandomForestClassifier(100,random_state=10)

#fit the model on the data and predict the values
model_RandomForest.fit(X_train,Y_train)

Y_pred=model_RandomForest.predict(X_test)
#%%


# In[103]:


from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

conf_matrix = confusion_matrix(Y_test,Y_pred)
plot_confusion_metrix(conf_matrix,classes=['RED  :  0','BLUE  :1','DRAW:0'])
plt.show()

print('Classification report')

print(classification_report(Y_test,Y_pred))

acc= accuracy_score(Y_test,Y_pred)
print("Accuracy of the model:", acc)


# # ANN MLPClassifier

# In[104]:


from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(100),max_iter=100, early_stopping=True,
                    random_state=10, activation="relu", solver="adam",learning_rate="constant",
                    learning_rate_init=0.01,verbose=True,n_iter_no_change=5)
mlp.fit(X_train,Y_train)
Y_pred = mlp.predict(X_test)
#print(list(zip(Y_test,Y_pred)))


# In[105]:


from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

conf_matrix = confusion_matrix(Y_test,Y_pred)
plot_confusion_metrix(conf_matrix,classes=['RED  :  0','BLUE  :1','DRAW:0'])
plt.show()

print('Classification report')

print(classification_report(Y_test,Y_pred))

acc= accuracy_score(Y_test,Y_pred)
print("Accuracy of the model:", acc)

]:




