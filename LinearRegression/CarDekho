# In[1]:


#importing the necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# In[6]:


## Importing Data into  a Dataframe
df=pd.read_csv(r'C:\Users\Saurabh\cardata.csv',header=0)
df.head()


# In[8]:


print(df.dtypes)
print()
print(df.shape)
print()
print(df.describe())


# In[10]:


# Check missing / null values
df.isnull().sum()


# In[11]:


## Removing Car Name
final_dataset=df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',
       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]
final_dataset.head()


# In[13]:


# Finding the age of the cars
final_dataset['Current Year']=2020
final_dataset['Ageing']=final_dataset['Current Year']-final_dataset['Year']
final_dataset.head()


# In[14]:


## Removing Current Year and Selling Year
final_dataset.drop(['Year','Current Year'],axis=1,inplace=True)
final_dataset.head()


# In[16]:


colname=[]
for x in final_dataset.columns:
    if final_dataset[x].dtype=='object':
        colname.append(x)
colname


# In[18]:


# For preprocessing the data
from sklearn import preprocessing

le=preprocessing.LabelEncoder()

for x in colname:
    final_dataset[x]=le.fit_transform(final_dataset[x])
    
final_dataset.head()    


# In[19]:


## Finding correlation
final_dataset.corr()


# In[21]:


## Splitting into Dependent and Independent features
X=final_dataset.iloc[:,1:]
Y=final_dataset.iloc[:,0]


# In[22]:


corr_final_dataset=X.corr(method="pearson")
print(corr_final_dataset)

sns.heatmap(corr_final_dataset,vmax=1.0,vmin=1.0,annot=True)


# In[24]:


#dropping Owner because of high multicollinearity
final_dataset.drop(['Owner'],axis=1,inplace=True)
final_dataset.head()


# In[26]:


from statsmodels.stats.outliers_influence import variance_inflation_factor as vif

vif_final_dataset = pd.DataFrame()
vif_final_dataset["features"] = X.columns
vif_final_dataset["VIF Factor"] = [vif(X.values, i) for i in range(X.shape[1])]
vif_final_dataset.round(2)


# In[27]:


#Dropping Fueltype because of high Vif score
final_dataset.drop(['Fuel_Type'],axis=1,inplace=True)
final_dataset.head()


# In[28]:


from sklearn.model_selection import train_test_split

#Split the data into test and train
X_train,X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.2,random_state=10)


# In[29]:


from sklearn.linear_model import LinearRegression
#create a model object
lm = LinearRegression()
#tain the model object
lm.fit(X_train,Y_train)

#print intercpt and coeffficents
print (lm.intercept_)
print (lm.coef_)


# In[30]:


#predicting suing the model
Y_pred=lm.predict(X_test)                                        #we only pass X_test in the predict function
print(Y_pred)


# In[31]:


new_df=pd.DataFrame()
new_df=X_test

new_df["Actual Selling Price"]=Y_test
new_df["Predicted Selling Price"]=Y_pred
new_df


# In[32]:


from sklearn.metrics import r2_score,mean_squared_error
import numpy as np

r2=r2_score(Y_test,Y_pred)
print(r2)

rmse=np.sqrt(mean_squared_error(Y_test,Y_pred))
print(rmse)

adjusted_r_squared = 1 - (1-r2)*(len(Y)-1)/(len(Y)-X.shape[1]-1)
print(adjusted_r_squared)
